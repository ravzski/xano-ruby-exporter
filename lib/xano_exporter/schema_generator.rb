# frozen_string_literal: true

require 'fileutils'
require 'csv'
require 'active_support/inflector'

module XanoExporter
  class SchemaGenerator
    def initialize(csv_dir = 'csv_exports', models_dir = 'outputs/schema')
      @csv_dir = csv_dir
      @models_dir = models_dir
    end


    def generate_schema(csv_dir = 'csv_exports', output_path = 'outputs/schema.rb')
      FileUtils.mkdir_p(File.dirname(output_path)) unless Dir.exist?(File.dirname(output_path))

      tables_data = load_tables_from_csv(csv_dir)

      File.open(output_path, 'w') do |file|
        file.puts "# This file is auto-generated from the current state of the Xano database"
        file.puts "# It was generated by XanoExporter version #{XanoExporter::VERSION}"
        file.puts ""
        file.puts "ActiveRecord::Schema.define(version: #{Time.now.utc.strftime('%Y%m%d%H%M%S')}) do"

        tables_data.each do |table_data|
          file.puts ""
          file.puts "  create_table \"#{table_data[:name]}\", force: :cascade do |t|"

          table_data[:headers].each do |header|
            next if header == 'id'

            column_type = infer_column_type(header, table_data[:sample_data][header])
            file.puts "    t.#{column_type} \"#{header}\""
          end

          file.puts "    t.timestamps"
          file.puts "  end"
        end

        tables_data.each do |table_data|
          table_data[:headers].each do |header|
            if header.end_with?('_id') && header != 'id'
              file.puts ""
              file.puts "  add_index \"#{table_data[:name]}\", [\"#{header}\"]"
            end
          end
        end

        file.puts "end"
      end

      puts "Schema generated at #{output_path}"
      output_path
    end

    private

    def load_tables_from_csv(csv_dir)
      tables_data = []

      Dir.glob("#{csv_dir}/*.csv").each do |csv_file|
        table_name = File.basename(csv_file, '.csv')

        begin
          headers = nil
          sample_data = nil

          CSV.foreach(csv_file, headers: true) do |row|
            headers = row.headers
            sample_data = row.to_h
            break # Only need the first row for structure
          end

          if headers
            tables_data << {
              name: table_name,
              headers: headers,
              sample_data: sample_data
            }
          end
        rescue => e
          puts "Error reading CSV file #{csv_file}: #{e.message}"
        end
      end

      tables_data
    end

    def infer_column_type(header, value)
      return "datetime" if header == "created_at" || header == "updated_at"
      return "references" if header.end_with?("_id")

      case value
      when Integer, /^\d+$/
        "integer"
      when Float, /^\d+\.\d+$/
        "float"
      when TrueClass, FalseClass, /^(true|false)$/i
        "boolean"
      when /^\d{4}-\d{2}-\d{2}$/
        "date"
      when /^\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}(:\d{2})?/
        "datetime"
      when /^\{.*\}$/, /^\[.*\]$/
        "json"
      else
        "string"
      end
    end
  end
end