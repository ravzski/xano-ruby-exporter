# frozen_string_literal: true

require 'fileutils'
require 'csv'
require 'active_support/inflector'

module XanoExporter
  class ModelGenerator
    attr_reader :csv_dir, :models_dir

    def initialize(csv_dir = 'csv_exports', models_dir = 'outputs/models')
      @csv_dir = csv_dir
      @models_dir = models_dir
    end

    def generate_models(csv_dir = 'csv_exports', models_dir = 'outputs/models')
      FileUtils.mkdir_p(models_dir) unless Dir.exist?(models_dir)

      tables_data = load_tables_from_csv(csv_dir)

      tables_data.each do |table_data|
        table_name = table_data[:name]
        model_name = table_name.singularize.camelize
        file_path = File.join(models_dir, "#{table_name.singularize}.rb")

        File.open(file_path, 'w') do |file|
          file.puts "# Generated by XanoExporter"
          file.puts "class #{model_name} < ApplicationRecord"

          # Add any model validations or associations based on field types
          table_data[:headers].each do |header|
            next if %w[id created_at updated_at].include?(header)

            # Check if it's likely a foreign key
            if header.end_with?('_id')
              association_name = header.gsub(/_id$/, '')
              file.puts "  belongs_to :#{association_name}, optional: true"
            end
          end

          file.puts "end"
        end

        puts "Generated model: #{file_path}"
      end

      puts "Models generated in #{models_dir}"
      models_dir
    end

    private

    def load_tables_from_csv(csv_dir)
      tables_data = []

      Dir.glob("#{csv_dir}/*.csv").each do |csv_file|
        table_name = File.basename(csv_file, '.csv')

        begin
          headers = nil
          sample_data = nil

          CSV.foreach(csv_file, headers: true) do |row|
            headers = row.headers
            sample_data = row.to_h
            break # Only need the first row for structure
          end

          if headers
            tables_data << {
              name: table_name,
              headers: headers,
              sample_data: sample_data
            }
          end
        rescue => e
          puts "Error reading CSV file #{csv_file}: #{e.message}"
        end
      end

      tables_data
    end
  end
end